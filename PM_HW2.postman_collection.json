{
	"info": {
		"_postman_id": "085d99cc-f956-43ad-998c-f17562d08b66",
		"name": "PM HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19717040"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});\r",
							"\r",
							"//  Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"//  Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"//Парсим response и reqest\r",
							"var jsonData = pm.response.json();\r",
							"var reqData = request.data;\r",
							"console.log(\"Family = \" ,jsonData)\r",
							"\r",
							"\r",
							"//Json value check\r",
							"pm.test(\"name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Alexey\");\r",
							"});\r",
							"\r",
							"pm.test(\"age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"30\");\r",
							"});\r",
							"\r",
							"pm.test(\"salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(150000);\r",
							"});\r",
							"\r",
							"\r",
							"var req_name = reqData.name\r",
							"pm.test(\"Проверить, что name в ответе равно name s request (name забрать из request.)\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"\r",
							"var req_age = reqData.age\r",
							"pm.test(\"Проверить, что age в ответе равно age s request (age забрать из request.)\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"var req_salary = +reqData.salary\r",
							"pm.test(\"Проверить, что salary в ответе равно salary s request (salary забрать из request.)\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"var resp_family = jsonData.family;\r",
							"console.log (resp_family)\r",
							"\r",
							"pm.test(\"u_salary_1_5_year\", function () {\r",
							"    pm.expect(jsonData.u_salary_1_5_year) === (req_salary*4)\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alexey",
							"type": "text"
						},
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "150000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Alexey",
							"disabled": true
						},
						{
							"key": "age",
							"value": "30",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "150000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Парсим response\r",
							"var srb = pm.response.json();\r",
							"var name = srb.name\r",
							"//Создаем переменную,тип данных int\r",
							"var age = parseInt(srb.age)\r",
							"var salary = srb.salary\r",
							"\r",
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let resp_family = srb.family\r",
							"console.log(\"resp_family = \" , resp_family)\r",
							"\r",
							"//Json value check\r",
							"pm.test(\"Name\", function () {\r",
							"    pm.expect(name).to.eql(\"Dron\");\r",
							"});\r",
							"\r",
							"pm.test(\"Age\", function () {\r",
							"    pm.expect(age).to.eql(31);\r",
							"});\r",
							"\r",
							"pm.test(\"Salary\", function () {\r",
							"    pm.expect(salary).to.eql(70000);\r",
							"});\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name, age\r",
							"pm.test(\"Check dog to have name,age\", function () {\r",
							"    pm.expect(srb.family.pets.dog).to.have.key(\"name\",\"age\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog name\", function () {\r",
							"    pm.expect(srb.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"Dog age\", function () {\r",
							"    pm.expect(srb.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Dron&age=31&salary=70000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Dron"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "70000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var bar = pm.response.json();\r",
							"// Спарсить response body в json\r",
							"let get_params = pm.request.url.query.toObject()\r",
							"let resp_salary = bar.salary\r",
							"\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age из request \r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(bar.name).to.eql(\"Olya\");\r",
							"});\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"barResp = JSON.parse(responseBody)\r",
							"barReq = pm.request.url.query.toObject()\r",
							"pm.test(\"Check names\", function () {\r",
							"    barResp.name === barReq.name;\r",
							"});\r",
							"\r",
							"\r",
							"console.log(get_params.salary);\r",
							"console.log(bar.salary);\r",
							"\r",
							"// Вывести в консоль 0-й,1-ый и 2-ой элементы параметра salary из response(по отдельности)\r",
							"console.log(bar.salary[0]);\r",
							"console.log(bar.salary[1]);\r",
							"console.log(bar.salary[2]);\r",
							"\r",
							"\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"0=0\", function () {\r",
							"    (bar.salary[0] === get_params.salary[0]);;\r",
							"});\r",
							"\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request\r",
							"pm.test(\"1=1\", function () {\r",
							"    (bar.salary[1] === get_params.salary[1]);;\r",
							"});\r",
							"\r",
							"\r",
							"// Создать в окружении переменную name\r",
							"//  Создать в окружении переменную age\r",
							"//  Создать в окружении переменную salary\r",
							"pm.environment.set(\"name\", bar.name);\r",
							"pm.environment.set(\"age\", bar.age);\r",
							"pm.environment.set(\"salary\", bar.salary[0]);\r",
							"\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"let i = bar.salary;\r",
							"while (i < 3) { \r",
							"  alert( i );\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Olya&age=32&salary=120000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Olya"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "120000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_1",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_1?name=Angel&age=18&weight=50",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_1"
					],
					"query": [
						{
							"key": "name",
							"value": "Angel"
						},
						{
							"key": "age",
							"value": "18"
						},
						{
							"key": "weight",
							"value": "50"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response\r",
							"var respjson = pm.response.json();\r",
							"// Спарсить request\r",
							"var reqjson = request.data;\r",
							"\r",
							"\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"pm.response.to.have.jsonBody(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"pm.response.to.have.jsonBody(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"pm.response.to.have.jsonBody(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"pm.response.to.have.jsonBody(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"pm.response.to.have.jsonBody(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"person\", function () {\r",
							"pm.response.to.have.jsonBody(\"person\");\r",
							"});\r",
							"\r",
							"\r",
							"var req_salary = +reqjson.salary;\r",
							"pm.test(\"Проверить, что параметр start_qa_salary равен salary из request\", function () {\r",
							"    pm.expect(respjson.start_qa_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"var qa_salary_after_6_months = +reqjson.salary;\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_6_months равен salary*2 из request\", function () {\r",
							"    pm.expect(respjson.qa_salary_after_6_months).to.eql(req_salary*2);\r",
							"});\r",
							"\r",
							"\r",
							"var qa_salary_after_12_months  = +reqjson.salary;\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_12_months равен salary*2.7 \", function () {\r",
							"    pm.expect(respjson.qa_salary_after_12_months).to.eql(req_salary*2.7);\r",
							"});\r",
							"\r",
							"var qa_salary_qa_salary_after_one_and_half_year = +reqjson.salary;\r",
							"pm.test('Проверить, что параметр qa_salary_after_1.5_year = salary * 3.3 ', function () {\r",
							"    pm.expect(respjson['qa_salary_qa_salary_after_one_and_half_year']).to.eql(req_salary * 3.3)\r",
							"});\r",
							"\r",
							"\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"var person_u_name = respjson.person.u_name;\r",
							"pm.test(\"Проверить, что в параметре person, 1-й элемент из u_name равен salary из request\", function () {\r",
							"    pm.expect(respjson.person.u_name[1]).to.eql(+req_salary);\r",
							"});\r",
							"\r",
							"\r",
							"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"var person = respjson;\r",
							"\r",
							"for( i in person) {    \r",
							"if (Array.isArray(person[i])) {\r",
							"for (i = 0; person.u_name[i]; i++){\r",
							"console.log(person.u_name[i]);\r",
							"}\r",
							"}\r",
							"else {\r",
							"console.log(person[i]);\r",
							"}\r",
							"};\r",
							"\t\t\t\t\t\t\t\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}
